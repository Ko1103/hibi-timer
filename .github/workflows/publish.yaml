name: publish

on:
  workflow_dispatch:
  push:
    branches:
      - main # 好みで tag トリガにもできます（tauri v2公式ガイド参照）

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            args: "--target x86_64-apple-darwin"
          # Windows / Linux は必要なら追加
    runs-on: ${{ matrix.platform }}

    env:
      # 公証（App Store Connect API 経由）
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      # tauri-bundler は notarytool を内部で呼びます。API鍵の渡し方は下の step を参照。:contentReference[oaicite:6]{index=6}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend deps
        run: npm ci

      # --- Apple 証明書をキーチェーンに取り込み（署名用） ---
      - name: Import Apple Developer Certificate
        shell: bash
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          # 探して最初に出た Developer ID を署名 ID として書き出し
          CERT_ID=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -n1 | awk -F'"' '{print $2}')
          echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV

      # --- 公証用 API Key ファイルを作る（notarytool が読む） ---
      - name: Write App Store Connect API key
        shell: bash
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: |
          # .p8 の中身をファイル化
          echo "$APPLE_API_KEY" > AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          echo "APPLE_API_KEY_PATH=$PWD/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8" >> $GITHUB_ENV

      # --- ビルド＆リリース作成＆アセットアップロード（公式 tauri-action） ---
      - name: Build & Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 署名
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          # 公証（API経由）
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }} # ← Key ID
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }} # ← .p8 ファイルパス
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          args: ${{ matrix.args }}
          # GitHub Release の生成＆アップロード設定
          tagName: app-v__VERSION__
          releaseName: "HibiFocus v__VERSION__"
          releaseBody: "Assets からダウンロードしてください。"
          releaseDraft: true
          prerelease: false
